'use strict';
 
/**
 * List <<M a>>
 */
 
const Joi = require('joi');
const MongoDB = require('mongodb');
<<? F hd>>
const <<M AA>>Projection = require('./inc').projection;
<<?>>

<<# Includes projections for all embedded (forced non-private) dependencies that have private fields >>
<<@ D em d>>
    <<? d.f hd>>
const <<d AA>>Projection = require('../<<d a-a>>/inc').projection;
    <<?>>
<<@>>
 
// Validation schema for query
const schema = Joi.object({
    <<P a_a>>: Joi.array().items(Joi.string().length(24).hex()).single(),
<<@ F se f>>
    <<=joiValidator(f)>>
<<@>>
    _page: Joi.number().min(0).required(),
    _limit: Joi.number().min(1).max(100).required(),
    _sort: Joi.string().valid(<<@ F so+pr f>>'<<f a_a>>', <<@>>),
    _order: Joi.string().valid('asc', 'desc')
})
<<@ F se*(tN+tD) f>>
    .without('<<f a_a>>', ['<<f a_a>>__min', '<<f a_a>>__max'])
<<@>>;
 
/**
 * Export route to list <<M a>>
 */
module.exports = {
    method: 'GET',
    path: '/<<M a-a>>',
    config: {
        validate: { query: schema },
        description: 'Route to list <<M a>>',
        tags: ['<<M a-a>>', 'list']
    },
    handler: async (request) => {
 
        // Build filter from query
        const filter = Object.assign({}, request.query);
        delete filter._page;
        delete filter._limit;
        delete filter._sort;
        delete filter._order;
 
        // Convert MongoId for <<P a>>
        if (filter.<<P a_a>>) {
            filter.<<P a_a>> = { $in: filter.<<P a_a>>.map((i) => new MongoDB.ObjectId(i)) };
        }

<<@ F se f>>

    <<? f tN+tD>>
 
        // Set min for <<f a>> if defined
        if (typeof filter.<<f a_a>>__min !== 'undefined') {
            filter.<<f a_a>> = filter.<<f a_a>> || {};
            filter.<<f a_a>>.$gte = filter.<<f a_a>>__min;
            delete filter.<<f a_a>>__min;
        }
        // Set max for <<f a>> if defined
        if (typeof filter.<<f a_a>>__max !== 'undefined') {
            filter.<<f a_a>> = filter.<<f a_a>> || {};
            filter.<<f a_a>>.$lte = filter.<<f a_a>>__max;
            delete filter.<<f a_a>>__max;
        }
    <<?? f tE>>
 
        // Convert MongoId for <<f a>>
        if (filter.<<f a_a>>) {
        <<? f ml>>
            filter.<<f a_a>> = { $all: filter.<<f a_a>>.map((i) => new MongoDB.ObjectId(i)) };
        <<??>>
            filter.<<f a_a>> = new MongoDB.ObjectId(filter.<<f a_a>>);
        <<?>>
        }
    <<?? f tS*lb>>
 
        // Use regexp for <<f a>>
        if (filter.<<f a_a>>) {
            filter.<<f a_a>> = new RegExp(filter.<<f a_a>>, 'i');
        }
    <<?>>

<<@>>
 
        // Build cursor vars
        const skip = request.query._page * request.query._limit;
        const order = request.query._order || 'asc';
        const sort = request.query._sort;
 
        // Get <<M a>> list from database
        const cursor = request.server.db.collection('<<M a_a>>')
            .find(filter<<? F hd>>, { projection: <<M AA>>Projection() }<<?>>)
            .skip(skip)
            .limit(request.query._limit);
 
        // Add sorting if available
        if (sort) {
            cursor.sort( { [sort]: order === 'asc' ? 1 : -1 } );
        }
 
        // Start query
        const results = await cursor.toArray();
        const total = await cursor.count();

<<? F tE*em>>
 
        // Convert reference fields
        await request.server.utils.Entity
            .populateList(request.server.db, results, [
    <<@ F tE*em r>>
                {
                    col: '<<r.m a_a>>',
                    prop: '<<r a_a>>'<<? r ml>>,
                    multiple: true<<?>><<? r.m.f hd>>,
                    projection: <<r.m AA>>Projection()
        <<?>>
                },
    <<@>>
            ]);
<<?>>
 
        return {
            page: request.query._page,
            limit: request.query._limit,
            count: results.length,
            total,
            items: results
        };
    }
};
 
<<< 
function joiValidator(f) {
    const prop = f.names.snake;
    let v = "";
    
    if (f.type === "boolean") v = `${prop}: Joi.boolean(),`;
    else if (f.type === "string") v = `${prop}: Joi.string(),`;
    else if (f.type === "number" || f.type === "datetime") {
        v = `${prop}: Joi.number(),\n    ${prop}__min: Joi.number(),\n    ${prop}__max: Joi.number(),`;
    }
    else if (f.type === "entity") {
        const validator = "Joi.string().length(24).hex()";
        if (f.multiple) {
            v = `${prop}: Joi.array().items(${validator}).single(),`;
        } else {
            v = `${prop}: ${validator},`;
        }
    }
    
    return v;
}
>>>
